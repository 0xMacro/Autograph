/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface SubscriptionsInterface extends utils.Interface {
  functions: {
    "_indexOf(address)": FunctionFragment;
    "getSubscriptions(address)": FunctionFragment;
    "subscribe(address)": FunctionFragment;
    "subscriptions(address,uint256)": FunctionFragment;
    "unsubscribe(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_indexOf"
      | "getSubscriptions"
      | "subscribe"
      | "subscriptions"
      | "unsubscribe"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "_indexOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getSubscriptions",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "subscribe", values: [string]): string;
  encodeFunctionData(
    functionFragment: "subscriptions",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "unsubscribe", values: [string]): string;

  decodeFunctionResult(functionFragment: "_indexOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSubscriptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "subscribe", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "subscriptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unsubscribe",
    data: BytesLike
  ): Result;

  events: {
    "Subscribed(address,address)": EventFragment;
    "Unsubscribed(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Subscribed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unsubscribed"): EventFragment;
}

export interface SubscribedEventObject {
  subscriber: string;
  book: string;
}
export type SubscribedEvent = TypedEvent<
  [string, string],
  SubscribedEventObject
>;

export type SubscribedEventFilter = TypedEventFilter<SubscribedEvent>;

export interface UnsubscribedEventObject {
  subscriber: string;
  book: string;
}
export type UnsubscribedEvent = TypedEvent<
  [string, string],
  UnsubscribedEventObject
>;

export type UnsubscribedEventFilter = TypedEventFilter<UnsubscribedEvent>;

export interface Subscriptions extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SubscriptionsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _indexOf(
      book: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean]>;

    getSubscriptions(
      owner: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    subscribe(
      book: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    subscriptions(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    unsubscribe(
      book: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  _indexOf(
    book: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, boolean]>;

  getSubscriptions(owner: string, overrides?: CallOverrides): Promise<string[]>;

  subscribe(
    book: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  subscriptions(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  unsubscribe(
    book: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    _indexOf(
      book: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, boolean]>;

    getSubscriptions(
      owner: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    subscribe(book: string, overrides?: CallOverrides): Promise<void>;

    subscriptions(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    unsubscribe(book: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Subscribed(address,address)"(
      subscriber?: string | null,
      book?: string | null
    ): SubscribedEventFilter;
    Subscribed(
      subscriber?: string | null,
      book?: string | null
    ): SubscribedEventFilter;

    "Unsubscribed(address,address)"(
      subscriber?: string | null,
      book?: string | null
    ): UnsubscribedEventFilter;
    Unsubscribed(
      subscriber?: string | null,
      book?: string | null
    ): UnsubscribedEventFilter;
  };

  estimateGas: {
    _indexOf(book: string, overrides?: CallOverrides): Promise<BigNumber>;

    getSubscriptions(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    subscribe(
      book: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    subscriptions(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unsubscribe(
      book: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _indexOf(
      book: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSubscriptions(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    subscribe(
      book: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    subscriptions(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unsubscribe(
      book: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
